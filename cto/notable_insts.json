{
    "single": {
        "VC++ basic_string<char> initialization": {"rule": "mov +(\\[[re][bs]p|qword ptr \\[r..?|dword ptr \\[e..).*\\], 0Fh", "regex":true},
        "VC++ basic_string<wchar_t> initialization": {"rule": "mov +(\\[[re][bs]p|qword ptr \\[r..?|dword ptr \\[e..).*\\], 7(|\\s;.*)$", "regex":true},
        "VC++ basic_string<char>.c_str()": {"rule": "cmp +(dword ptr \\[e.+\\]|qword ptr \\[r.+\\]|\\[r[bs]p.+\\]), 10h", "regex":true},
        "VC++ basic_string<wchar_t>.c_str()": {"rule": "cmp +(dword ptr \\[e.+\\]|qword ptr \\[r.+\\]|\\[r[bs]p.+\\]), 8(|\\s;.*)$", "regex":true},
        "VC++ std:map<unk,unk> map node ctor (for 64-bit)": {"rule": "mov +word ptr \\[r.+\\+18h\\], 101h$", "regex":true},
        "VC++ std:map<unk,unk> map node ctor (for 32-bit)": {"rule": "mov +word ptr \\[e.+\\+0Ch\\], 101h$", "regex":true},
        "VC++ std:map<unk,unk> map node ctor (for 64-bit, old versions)": {"rule": "mov +word ptr \\[r.+\\+[0-9A-F]+h\\], 101h$", "regex":true},
        "VC++ std:map<unk,unk> map node ctor (for 32-bit, old versions)": {"rule": "mov +word ptr \\[e.+\\+[0-9A-F]+h\\], 101h$", "regex":true},
        "cpuid": {"rule": "cpuid", "regex":false}
    },
    "multiple":{
    }
}
